/*
 * generated by Xtext 2.14.0
 */
package imp.lang.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ImpGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSkipParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Stmt:
		//	Skip | Assign | Block | If | While;
		@Override public ParserRule getRule() { return rule; }
		
		//Skip | Assign | Block | If | While
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Skip
		public RuleCall getSkipParserRuleCall_0() { return cSkipParserRuleCall_0; }
		
		//Assign
		public RuleCall getAssignParserRuleCall_1() { return cAssignParserRuleCall_1; }
		
		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }
		
		//If
		public RuleCall getIfParserRuleCall_3() { return cIfParserRuleCall_3; }
		
		//While
		public RuleCall getWhileParserRuleCall_4() { return cWhileParserRuleCall_4; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnaryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBinaryParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cArrayDeclParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expr:
		//	IntConst | BoolConst | Var | Unary | Binary | ArrayDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//IntConst | BoolConst | Var | Unary | Binary | ArrayDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntConst
		public RuleCall getIntConstParserRuleCall_0() { return cIntConstParserRuleCall_0; }
		
		//BoolConst
		public RuleCall getBoolConstParserRuleCall_1() { return cBoolConstParserRuleCall_1; }
		
		//Var
		public RuleCall getVarParserRuleCall_2() { return cVarParserRuleCall_2; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_3() { return cUnaryParserRuleCall_3; }
		
		//Binary
		public RuleCall getBinaryParserRuleCall_4() { return cBinaryParserRuleCall_4; }
		
		//ArrayDecl
		public RuleCall getArrayDeclParserRuleCall_5() { return cArrayDeclParserRuleCall_5; }
	}
	public class ArrayDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.ArrayDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesExprParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesExprParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayDecl:
		//	{ArrayDecl} '[' (values+=Expr (',' values+=Expr)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayDecl} '[' (values+=Expr (',' values+=Expr)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{ArrayDecl}
		public Action getArrayDeclAction_0() { return cArrayDeclAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=Expr (',' values+=Expr)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=Expr
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//Expr
		public RuleCall getValuesExprParserRuleCall_2_0_0() { return cValuesExprParserRuleCall_2_0_0; }
		
		//(',' values+=Expr)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=Expr
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//Expr
		public RuleCall getValuesExprParserRuleCall_2_1_1_0() { return cValuesExprParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkipAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Skip:
		//	{Skip}
		//	'Skip';
		@Override public ParserRule getRule() { return rule; }
		
		//{Skip} 'Skip'
		public Group getGroup() { return cGroup; }
		
		//{Skip}
		public Action getSkipAction_0() { return cSkipAction_0; }
		
		//'Skip'
		public Keyword getSkipKeyword_1() { return cSkipKeyword_1; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexExprParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExprParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Assign:
		//	name=EString ('[' index=Expr ']')? '=' exp=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ('[' index=Expr ']')? '=' exp=Expr
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//('[' index=Expr ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//index=Expr
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }
		
		//Expr
		public RuleCall getIndexExprParserRuleCall_1_1_0() { return cIndexExprParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//exp=Expr
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Expr
		public RuleCall getExpExprParserRuleCall_3_0() { return cExpExprParserRuleCall_3_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStmtsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStmtsStmtParserRuleCall_2_0_0 = (RuleCall)cStmtsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStmtsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_2_1_1_0 = (RuleCall)cStmtsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block}
		//	'{' (stmts+=Stmt (';' stmts+=Stmt)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' (stmts+=Stmt (';' stmts+=Stmt)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(stmts+=Stmt (';' stmts+=Stmt)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//stmts+=Stmt
		public Assignment getStmtsAssignment_2_0() { return cStmtsAssignment_2_0; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_0_0() { return cStmtsStmtParserRuleCall_2_0_0; }
		
		//(';' stmts+=Stmt)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_0() { return cSemicolonKeyword_2_1_0; }
		
		//stmts+=Stmt
		public Assignment getStmtsAssignment_2_1_1() { return cStmtsAssignment_2_1_1; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_1_1_0() { return cStmtsStmtParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLhsStmtParserRuleCall_4_0 = (RuleCall)cLhsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRhsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRhsStmtParserRuleCall_5_1_0 = (RuleCall)cRhsAssignment_5_1.eContents().get(0);
		
		//If:
		//	'if' '(' cond=Expr ')' lhs=Stmt (=> 'else' rhs=Stmt);
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' cond=Expr ')' lhs=Stmt (=> 'else' rhs=Stmt)
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Expr
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_2_0() { return cCondExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//lhs=Stmt
		public Assignment getLhsAssignment_4() { return cLhsAssignment_4; }
		
		//Stmt
		public RuleCall getLhsStmtParserRuleCall_4_0() { return cLhsStmtParserRuleCall_4_0; }
		
		//=> 'else' rhs=Stmt
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//rhs=Stmt
		public Assignment getRhsAssignment_5_1() { return cRhsAssignment_5_1; }
		
		//Stmt
		public RuleCall getRhsStmtParserRuleCall_5_1_0() { return cRhsStmtParserRuleCall_5_1_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStmtParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//While:
		//	'while' '(' cond=Expr ')' body=Stmt;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' cond=Expr ')' body=Stmt
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Expr
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_2_0() { return cCondExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Stmt
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Stmt
		public RuleCall getBodyStmtParserRuleCall_4_0() { return cBodyStmtParserRuleCall_4_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class IntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.IntConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntConst:
		//	{IntConst} value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConst} value=EInt
		public Group getGroup() { return cGroup; }
		
		//{IntConst}
		public Action getIntConstAction_0() { return cIntConstAction_0; }
		
		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}
	public class BoolConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.BoolConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BoolConst:
		//	{BoolConst} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolConst} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{BoolConst}
		public Action getBoolConstAction_0() { return cBoolConstAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexExprParserRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Var:
		//	{Var} name=EString ('[' index=Expr ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Var} name=EString ('[' index=Expr ']')?
		public Group getGroup() { return cGroup; }
		
		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('[' index=Expr ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//index=Expr
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//Expr
		public RuleCall getIndexExprParserRuleCall_2_1_0() { return cIndexExprParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Unary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpUnaryOpEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Unary:
		//	'Unary' '{' op=UnaryOp expr=Expr '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Unary' '{' op=UnaryOp expr=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Unary'
		public Keyword getUnaryKeyword_0() { return cUnaryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//op=UnaryOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//UnaryOp
		public RuleCall getOpUnaryOpEnumRuleCall_2_0() { return cOpUnaryOpEnumRuleCall_2_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBinaryOpEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Keyword cLhsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLhsExprParserRuleCall_4_0 = (RuleCall)cLhsAssignment_4.eContents().get(0);
		private final Keyword cRhsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRhsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRhsExprParserRuleCall_6_0 = (RuleCall)cRhsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Binary:
		//	'Binary' '{' op=BinaryOp
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Binary' '{' op=BinaryOp 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Binary'
		public Keyword getBinaryKeyword_0() { return cBinaryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//op=BinaryOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//BinaryOp
		public RuleCall getOpBinaryOpEnumRuleCall_2_0() { return cOpBinaryOpEnumRuleCall_2_0; }
		
		//'lhs'
		public Keyword getLhsKeyword_3() { return cLhsKeyword_3; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_4() { return cLhsAssignment_4; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_4_0() { return cLhsExprParserRuleCall_4_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_5() { return cRhsKeyword_5; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_6() { return cRhsAssignment_6; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_6_0() { return cRhsExprParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class UnaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEGATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEGATENEGATEKeyword_0_0 = (Keyword)cNEGATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTNOTKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOp:
		//	NEGATE | NOT;
		public EnumRule getRule() { return rule; }
		
		//NEGATE | NOT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEGATE
		public EnumLiteralDeclaration getNEGATEEnumLiteralDeclaration_0() { return cNEGATEEnumLiteralDeclaration_0; }
		
		//'NEGATE'
		public Keyword getNEGATENEGATEKeyword_0_0() { return cNEGATENEGATEKeyword_0_0; }
		
		//NOT
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_1_0() { return cNOTNOTKeyword_1_0; }
	}
	public class BinaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.BinaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDADDKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBSUBKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULMULKeyword_2_0 = (Keyword)cMULEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLTLTKeyword_3_0 = (Keyword)cLTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLEQLEQKeyword_4_0 = (Keyword)cLEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEQEQKeyword_5_0 = (Keyword)cEQEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGEQGEQKeyword_6_0 = (Keyword)cGEQEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGTGTKeyword_7_0 = (Keyword)cGTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cANDANDKeyword_8_0 = (Keyword)cANDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cORORKeyword_9_0 = (Keyword)cOREnumLiteralDeclaration_9.eContents().get(0);
		
		//enum BinaryOp:
		//	ADD | SUB | MUL | LT | LEQ | EQ | GEQ | GT | AND | OR;
		public EnumRule getRule() { return rule; }
		
		//ADD | SUB | MUL | LT | LEQ | EQ | GEQ | GT | AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'ADD'
		public Keyword getADDADDKeyword_0_0() { return cADDADDKeyword_0_0; }
		
		//SUB
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//'SUB'
		public Keyword getSUBSUBKeyword_1_0() { return cSUBSUBKeyword_1_0; }
		
		//MUL
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_2() { return cMULEnumLiteralDeclaration_2; }
		
		//'MUL'
		public Keyword getMULMULKeyword_2_0() { return cMULMULKeyword_2_0; }
		
		//LT
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_3() { return cLTEnumLiteralDeclaration_3; }
		
		//'LT'
		public Keyword getLTLTKeyword_3_0() { return cLTLTKeyword_3_0; }
		
		//LEQ
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_4() { return cLEQEnumLiteralDeclaration_4; }
		
		//'LEQ'
		public Keyword getLEQLEQKeyword_4_0() { return cLEQLEQKeyword_4_0; }
		
		//EQ
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_5() { return cEQEnumLiteralDeclaration_5; }
		
		//'EQ'
		public Keyword getEQEQKeyword_5_0() { return cEQEQKeyword_5_0; }
		
		//GEQ
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_6() { return cGEQEnumLiteralDeclaration_6; }
		
		//'GEQ'
		public Keyword getGEQGEQKeyword_6_0() { return cGEQGEQKeyword_6_0; }
		
		//GT
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_7() { return cGTEnumLiteralDeclaration_7; }
		
		//'GT'
		public Keyword getGTGTKeyword_7_0() { return cGTGTKeyword_7_0; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_8() { return cANDEnumLiteralDeclaration_8; }
		
		//'AND'
		public Keyword getANDANDKeyword_8_0() { return cANDANDKeyword_8_0; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_9() { return cOREnumLiteralDeclaration_9; }
		
		//'OR'
		public Keyword getORORKeyword_9_0() { return cORORKeyword_9_0; }
	}
	
	private final StmtElements pStmt;
	private final ExprElements pExpr;
	private final ArrayDeclElements pArrayDecl;
	private final SkipElements pSkip;
	private final AssignElements pAssign;
	private final BlockElements pBlock;
	private final IfElements pIf;
	private final WhileElements pWhile;
	private final EStringElements pEString;
	private final IntConstElements pIntConst;
	private final BoolConstElements pBoolConst;
	private final VarElements pVar;
	private final UnaryElements pUnary;
	private final BinaryElements pBinary;
	private final EIntElements pEInt;
	private final UnaryOpElements eUnaryOp;
	private final BinaryOpElements eBinaryOp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ImpGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStmt = new StmtElements();
		this.pExpr = new ExprElements();
		this.pArrayDecl = new ArrayDeclElements();
		this.pSkip = new SkipElements();
		this.pAssign = new AssignElements();
		this.pBlock = new BlockElements();
		this.pIf = new IfElements();
		this.pWhile = new WhileElements();
		this.pEString = new EStringElements();
		this.pIntConst = new IntConstElements();
		this.pBoolConst = new BoolConstElements();
		this.pVar = new VarElements();
		this.pUnary = new UnaryElements();
		this.pBinary = new BinaryElements();
		this.pEInt = new EIntElements();
		this.eUnaryOp = new UnaryOpElements();
		this.eBinaryOp = new BinaryOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("imp.lang.xtext.Imp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Stmt:
	//	Skip | Assign | Block | If | While;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//Expr:
	//	IntConst | BoolConst | Var | Unary | Binary | ArrayDecl;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ArrayDecl:
	//	{ArrayDecl} '[' (values+=Expr (',' values+=Expr)*)? ']';
	public ArrayDeclElements getArrayDeclAccess() {
		return pArrayDecl;
	}
	
	public ParserRule getArrayDeclRule() {
		return getArrayDeclAccess().getRule();
	}
	
	//Skip:
	//	{Skip}
	//	'Skip';
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}
	
	//Assign:
	//	name=EString ('[' index=Expr ']')? '=' exp=Expr;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//Block:
	//	{Block}
	//	'{' (stmts+=Stmt (';' stmts+=Stmt)*)?
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//If:
	//	'if' '(' cond=Expr ')' lhs=Stmt (=> 'else' rhs=Stmt);
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//While:
	//	'while' '(' cond=Expr ')' body=Stmt;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//IntConst:
	//	{IntConst} value=EInt;
	public IntConstElements getIntConstAccess() {
		return pIntConst;
	}
	
	public ParserRule getIntConstRule() {
		return getIntConstAccess().getRule();
	}
	
	//BoolConst:
	//	{BoolConst} (value?='true' | 'false');
	public BoolConstElements getBoolConstAccess() {
		return pBoolConst;
	}
	
	public ParserRule getBoolConstRule() {
		return getBoolConstAccess().getRule();
	}
	
	//Var:
	//	{Var} name=EString ('[' index=Expr ']')?;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//Unary:
	//	'Unary' '{' op=UnaryOp expr=Expr '}';
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//Binary:
	//	'Binary' '{' op=BinaryOp
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum UnaryOp:
	//	NEGATE | NOT;
	public UnaryOpElements getUnaryOpAccess() {
		return eUnaryOp;
	}
	
	public EnumRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//enum BinaryOp:
	//	ADD | SUB | MUL | LT | LEQ | EQ | GEQ | GT | AND | OR;
	public BinaryOpElements getBinaryOpAccess() {
		return eBinaryOp;
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
