/*
 * generated by Xtext 2.14.0
 */
package imp.lang.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ImpGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassesClassParserRuleCall_0_0 = (RuleCall)cClassesAssignment_0.eContents().get(0);
		private final Assignment cMethodsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodsMethodDeclParserRuleCall_1_0 = (RuleCall)cMethodsAssignment_1.eContents().get(0);
		
		//Program:
		//	classes+=Class*
		//	methods+=MethodDecl*;
		@Override public ParserRule getRule() { return rule; }
		
		//classes+=Class* methods+=MethodDecl*
		public Group getGroup() { return cGroup; }
		
		//classes+=Class*
		public Assignment getClassesAssignment_0() { return cClassesAssignment_0; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_0_0() { return cClassesClassParserRuleCall_0_0; }
		
		//methods+=MethodDecl*
		public Assignment getMethodsAssignment_1() { return cMethodsAssignment_1; }
		
		//MethodDecl
		public RuleCall getMethodsMethodDeclParserRuleCall_1_0() { return cMethodsMethodDeclParserRuleCall_1_0; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeDeclParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cMethodsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodsMethodDeclParserRuleCall_4_0 = (RuleCall)cMethodsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class:
		//	'class' name=ID '{'
		//	attributes+=AttributeDecl*
		//	methods+=MethodDecl*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID '{' attributes+=AttributeDecl* methods+=MethodDecl* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=AttributeDecl*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//AttributeDecl
		public RuleCall getAttributesAttributeDeclParserRuleCall_3_0() { return cAttributesAttributeDeclParserRuleCall_3_0; }
		
		//methods+=MethodDecl*
		public Assignment getMethodsAssignment_4() { return cMethodsAssignment_4; }
		
		//MethodDecl
		public RuleCall getMethodsMethodDeclParserRuleCall_4_0() { return cMethodsMethodDeclParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AttributeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.AttributeDecl");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AttributeDecl:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParamDeclParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParamDeclParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStmtAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStmtStmtParserRuleCall_5_0 = (RuleCall)cStmtAssignment_5.eContents().get(0);
		
		//MethodDecl:
		//	'def' name=ID '(' (params+=ParamDecl (',' params+=ParamDecl)*)? ')' stmt=Stmt;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=ID '(' (params+=ParamDecl (',' params+=ParamDecl)*)? ')' stmt=Stmt
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=ParamDecl (',' params+=ParamDecl)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=ParamDecl
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//ParamDecl
		public RuleCall getParamsParamDeclParserRuleCall_3_0_0() { return cParamsParamDeclParserRuleCall_3_0_0; }
		
		//(',' params+=ParamDecl)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=ParamDecl
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//ParamDecl
		public RuleCall getParamsParamDeclParserRuleCall_3_1_1_0() { return cParamsParamDeclParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//stmt=Stmt
		public Assignment getStmtAssignment_5() { return cStmtAssignment_5; }
		
		//Stmt
		public RuleCall getStmtStmtParserRuleCall_5_0() { return cStmtStmtParserRuleCall_5_0; }
	}
	public class ParamDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.ParamDecl");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParamDecl:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReturnParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrintParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAssignmentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cExprParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//Stmt:
		//	Declaration | Block | If | While | Return | Print | Assignment | Expr ';';
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | Block | If | While | Return | Print | Assignment | Expr ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
		
		//If
		public RuleCall getIfParserRuleCall_2() { return cIfParserRuleCall_2; }
		
		//While
		public RuleCall getWhileParserRuleCall_3() { return cWhileParserRuleCall_3; }
		
		//Return
		public RuleCall getReturnParserRuleCall_4() { return cReturnParserRuleCall_4; }
		
		//Print
		public RuleCall getPrintParserRuleCall_5() { return cPrintParserRuleCall_5; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_6() { return cAssignmentParserRuleCall_6; }
		
		//Expr ';'
		public Group getGroup_7() { return cGroup_7; }
		
		//Expr
		public RuleCall getExprParserRuleCall_7_0() { return cExprParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExprParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		////Skip returns Skip:
		////	{Skip}
		////	'Skip';
		//Declaration:
		//	'let' name=EString '=' exp=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' name=EString '=' exp=Expr
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//exp=Expr
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Expr
		public RuleCall getExpExprParserRuleCall_3_0() { return cExpExprParserRuleCall_3_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStmtsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStmtsStmtParserRuleCall_2_0_0 = (RuleCall)cStmtsAssignment_2_0.eContents().get(0);
		private final Assignment cStmtsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_2_1_0 = (RuleCall)cStmtsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block}
		//	'{' (stmts+=Stmt stmts+=Stmt*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' (stmts+=Stmt stmts+=Stmt*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(stmts+=Stmt stmts+=Stmt*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//stmts+=Stmt
		public Assignment getStmtsAssignment_2_0() { return cStmtsAssignment_2_0; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_0_0() { return cStmtsStmtParserRuleCall_2_0_0; }
		
		//stmts+=Stmt*
		public Assignment getStmtsAssignment_2_1() { return cStmtsAssignment_2_1; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_1_0() { return cStmtsStmtParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLhsStmtParserRuleCall_4_0 = (RuleCall)cLhsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRhsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRhsStmtParserRuleCall_5_1_0 = (RuleCall)cRhsAssignment_5_1.eContents().get(0);
		
		//If:
		//	'if' '(' cond=Expr ')' lhs=Stmt (=> 'else' rhs=Stmt);
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' cond=Expr ')' lhs=Stmt (=> 'else' rhs=Stmt)
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Expr
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_2_0() { return cCondExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//lhs=Stmt
		public Assignment getLhsAssignment_4() { return cLhsAssignment_4; }
		
		//Stmt
		public RuleCall getLhsStmtParserRuleCall_4_0() { return cLhsStmtParserRuleCall_4_0; }
		
		//=> 'else' rhs=Stmt
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//rhs=Stmt
		public Assignment getRhsAssignment_5_1() { return cRhsAssignment_5_1; }
		
		//Stmt
		public RuleCall getRhsStmtParserRuleCall_5_1_0() { return cRhsStmtParserRuleCall_5_1_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStmtParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//While:
		//	'while' '(' cond=Expr ')' body=Stmt;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' cond=Expr ')' body=Stmt
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Expr
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_2_0() { return cCondExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Stmt
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Stmt
		public RuleCall getBodyStmtParserRuleCall_4_0() { return cBodyStmtParserRuleCall_4_0; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Return:
		//	'return' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Print:
		//	'print' '(' expr=Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' '(' expr=Expr ')'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	AttributeDecl | MethodDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeDecl | MethodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeDecl
		public RuleCall getAttributeDeclParserRuleCall_0() { return cAttributeDeclParserRuleCall_0; }
		
		//MethodDecl
		public RuleCall getMethodDeclParserRuleCall_1() { return cMethodDeclParserRuleCall_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsExprParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsProjectParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		
		//Assignment:
		//	{Assignment} lhs=Expr '=' rhs=Project;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignment} lhs=Expr '=' rhs=Project
		public Group getGroup() { return cGroup; }
		
		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_1_0() { return cLhsExprParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//rhs=Project
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }
		
		//Project
		public RuleCall getRhsProjectParserRuleCall_3_0() { return cRhsProjectParserRuleCall_3_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Expr");
		private final RuleCall cProjectParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	Project;
		@Override public ParserRule getRule() { return rule; }
		
		//Project
		public RuleCall getProjectParserRuleCall() { return cProjectParserRuleCall; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cProjectLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final CrossReference cRhsMemberCrossReference_1_1_1_0_0 = (CrossReference)cRhsAssignment_1_1_1_0.eContents().get(0);
		private final RuleCall cRhsMemberIDTerminalRuleCall_1_1_1_0_0_1 = (RuleCall)cRhsMemberCrossReference_1_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Assignment cIsmethodcallAssignment_1_1_1_1_0 = (Assignment)cGroup_1_1_1_1.eContents().get(0);
		private final Keyword cIsmethodcallLeftParenthesisKeyword_1_1_1_1_0_0 = (Keyword)cIsmethodcallAssignment_1_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1_1 = (Group)cGroup_1_1_1_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_1_1_1_0 = (Assignment)cGroup_1_1_1_1_1.eContents().get(0);
		private final RuleCall cParamsExprParserRuleCall_1_1_1_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1_1_1 = (Group)cGroup_1_1_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1_1_1.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_1_1_1_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_1_2 = (Keyword)cGroup_1_1_1_1.eContents().get(2);
		
		//Project Expr:
		//	Binary ({Project.lhs=current} (=> '.' (rhs=[Member] (ismethodcall?='(' (params+=Expr (',' params+=Expr)*)?
		//	')')?)))*;
		@Override public ParserRule getRule() { return rule; }
		
		//Binary ({Project.lhs=current} (=> '.' (rhs=[Member] (ismethodcall?='(' (params+=Expr (',' params+=Expr)*)? ')')?)))*
		public Group getGroup() { return cGroup; }
		
		//Binary
		public RuleCall getBinaryParserRuleCall_0() { return cBinaryParserRuleCall_0; }
		
		//({Project.lhs=current} (=> '.' (rhs=[Member] (ismethodcall?='(' (params+=Expr (',' params+=Expr)*)? ')')?)))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Project.lhs=current}
		public Action getProjectLhsAction_1_0() { return cProjectLhsAction_1_0; }
		
		//=> '.' (rhs=[Member] (ismethodcall?='(' (params+=Expr (',' params+=Expr)*)? ')')?)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//rhs=[Member] (ismethodcall?='(' (params+=Expr (',' params+=Expr)*)? ')')?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//rhs=[Member]
		public Assignment getRhsAssignment_1_1_1_0() { return cRhsAssignment_1_1_1_0; }
		
		//[Member]
		public CrossReference getRhsMemberCrossReference_1_1_1_0_0() { return cRhsMemberCrossReference_1_1_1_0_0; }
		
		//ID
		public RuleCall getRhsMemberIDTerminalRuleCall_1_1_1_0_0_1() { return cRhsMemberIDTerminalRuleCall_1_1_1_0_0_1; }
		
		//(ismethodcall?='(' (params+=Expr (',' params+=Expr)*)? ')')?
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//ismethodcall?='('
		public Assignment getIsmethodcallAssignment_1_1_1_1_0() { return cIsmethodcallAssignment_1_1_1_1_0; }
		
		//'('
		public Keyword getIsmethodcallLeftParenthesisKeyword_1_1_1_1_0_0() { return cIsmethodcallLeftParenthesisKeyword_1_1_1_1_0_0; }
		
		//(params+=Expr (',' params+=Expr)*)?
		public Group getGroup_1_1_1_1_1() { return cGroup_1_1_1_1_1; }
		
		//params+=Expr
		public Assignment getParamsAssignment_1_1_1_1_1_0() { return cParamsAssignment_1_1_1_1_1_0; }
		
		//Expr
		public RuleCall getParamsExprParserRuleCall_1_1_1_1_1_0_0() { return cParamsExprParserRuleCall_1_1_1_1_1_0_0; }
		
		//(',' params+=Expr)*
		public Group getGroup_1_1_1_1_1_1() { return cGroup_1_1_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_1_1_0; }
		
		//params+=Expr
		public Assignment getParamsAssignment_1_1_1_1_1_1_1() { return cParamsAssignment_1_1_1_1_1_1_1; }
		
		//Expr
		public RuleCall getParamsExprParserRuleCall_1_1_1_1_1_1_1_0() { return cParamsExprParserRuleCall_1_1_1_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1_1_2() { return cRightParenthesisKeyword_1_1_1_1_2; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBinaryOpEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsUnaryParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//Binary Expr:
		//	Unary ({Binary.lhs=current} op=BinaryOp rhs=Unary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary ({Binary.lhs=current} op=BinaryOp rhs=Unary)*
		public Group getGroup() { return cGroup; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }
		
		//({Binary.lhs=current} op=BinaryOp rhs=Unary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Binary.lhs=current}
		public Action getBinaryLhsAction_1_0() { return cBinaryLhsAction_1_0; }
		
		//op=BinaryOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//BinaryOp
		public RuleCall getOpBinaryOpEnumRuleCall_1_1_0() { return cOpBinaryOpEnumRuleCall_1_1_0; }
		
		//rhs=Unary
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//Unary
		public RuleCall getRhsUnaryParserRuleCall_1_2_0() { return cRhsUnaryParserRuleCall_1_2_0; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpUnaryOpEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprUnaryParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Unary Expr:
		//	'(' Expr ')' | {Unary} op=UnaryOp expr=Unary | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expr ')' | {Unary} op=UnaryOp expr=Unary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expr ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0_1() { return cExprParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Unary} op=UnaryOp expr=Unary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Unary}
		public Action getUnaryAction_1_0() { return cUnaryAction_1_0; }
		
		//op=UnaryOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//UnaryOp
		public RuleCall getOpUnaryOpEnumRuleCall_1_1_0() { return cOpUnaryOpEnumRuleCall_1_1_0; }
		
		//expr=Unary
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//Unary
		public RuleCall getExprUnaryParserRuleCall_1_2_0() { return cExprUnaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringConstParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNewClassParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVarRefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cThisParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Atomic Expr:
		//	IntConst | BoolConst | StringConst | NewClass | VarRef | This;
		@Override public ParserRule getRule() { return rule; }
		
		//IntConst | BoolConst | StringConst | NewClass | VarRef | This
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntConst
		public RuleCall getIntConstParserRuleCall_0() { return cIntConstParserRuleCall_0; }
		
		//BoolConst
		public RuleCall getBoolConstParserRuleCall_1() { return cBoolConstParserRuleCall_1; }
		
		//StringConst
		public RuleCall getStringConstParserRuleCall_2() { return cStringConstParserRuleCall_2; }
		
		//NewClass
		public RuleCall getNewClassParserRuleCall_3() { return cNewClassParserRuleCall_3; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_4() { return cVarRefParserRuleCall_4; }
		
		////	ArrayDecl |
		//This
		public RuleCall getThisParserRuleCall_5() { return cThisParserRuleCall_5; }
	}
	public class IntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.IntConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntConst:
		//	{IntConst} value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConst} value=EInt
		public Group getGroup() { return cGroup; }
		
		//{IntConst}
		public Action getIntConstAction_0() { return cIntConstAction_0; }
		
		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}
	public class BoolConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.BoolConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BoolConst:
		//	{BoolConst} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolConst} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{BoolConst}
		public Action getBoolConstAction_0() { return cBoolConstAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class StringConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.StringConst");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringConst:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class NewClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.NewClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassClassCrossReference_1_0 = (CrossReference)cClassAssignment_1.eContents().get(0);
		private final RuleCall cClassClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NewClass:
		//	'new' class=[Class] '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' class=[Class] '(' ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//class=[Class]
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }
		
		//[Class]
		public CrossReference getClassClassCrossReference_1_0() { return cClassClassCrossReference_1_0; }
		
		//ID
		public RuleCall getClassClassIDTerminalRuleCall_1_0_1() { return cClassClassIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefSymbolCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefSymbolIDTerminalRuleCall_1_0_1 = (RuleCall)cRefSymbolCrossReference_1_0.eContents().get(1);
		
		////ArrayDecl returns ArrayDecl:
		////	{ArrayDecl} '[' (values+=Expr (',' values+=Expr)*)? ']';
		//VarRef Expr:
		//	{VarRef} ref=[Symbol];
		@Override public ParserRule getRule() { return rule; }
		
		//{VarRef} ref=[Symbol]
		public Group getGroup() { return cGroup; }
		
		//{VarRef}
		public Action getVarRefAction_0() { return cVarRefAction_0; }
		
		//ref=[Symbol]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Symbol]
		public CrossReference getRefSymbolCrossReference_1_0() { return cRefSymbolCrossReference_1_0; }
		
		//ID
		public RuleCall getRefSymbolIDTerminalRuleCall_1_0_1() { return cRefSymbolIDTerminalRuleCall_1_0_1; }
	}
	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.This");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//This:
		//	{This} 'this';
		@Override public ParserRule getRule() { return rule; }
		
		//{This} 'this'
		public Group getGroup() { return cGroup; }
		
		//{This}
		public Action getThisAction_0() { return cThisAction_0; }
		
		//'this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	public class UnaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEGATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEGATEHyphenMinusKeyword_0_0 = (Keyword)cNEGATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOp:
		//	NEGATE='-' | NOT='!';
		public EnumRule getRule() { return rule; }
		
		//NEGATE='-' | NOT='!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEGATE='-'
		public EnumLiteralDeclaration getNEGATEEnumLiteralDeclaration_0() { return cNEGATEEnumLiteralDeclaration_0; }
		
		//'-'
		public Keyword getNEGATEHyphenMinusKeyword_0_0() { return cNEGATEHyphenMinusKeyword_0_0; }
		
		//NOT='!'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }
		
		//'!'
		public Keyword getNOTExclamationMarkKeyword_1_0() { return cNOTExclamationMarkKeyword_1_0; }
	}
	public class BinaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "imp.lang.xtext.Imp.BinaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMULAsteriskKeyword_1_0 = (Keyword)cMULEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLTLessThanSignKeyword_2_0 = (Keyword)cLTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLEQEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEQEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGEQEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGTGreaterThanSignKeyword_6_0 = (Keyword)cGTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cANDAmpersandAmpersandKeyword_7_0 = (Keyword)cANDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cORVerticalLineVerticalLineKeyword_8_0 = (Keyword)cOREnumLiteralDeclaration_8.eContents().get(0);
		
		//enum BinaryOp:
		//	ADD='+' | MUL='*' | LT='<' | LEQ='<=' | EQ='==' | GEQ='>=' | GT='>' | AND='&&' | OR='||';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | MUL='*' | LT='<' | LEQ='<=' | EQ='==' | GEQ='>=' | GT='>' | AND='&&' | OR='||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//MUL='*'
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_1() { return cMULEnumLiteralDeclaration_1; }
		
		//'*'
		public Keyword getMULAsteriskKeyword_1_0() { return cMULAsteriskKeyword_1_0; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_2() { return cLTEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_2_0() { return cLTLessThanSignKeyword_2_0; }
		
		//LEQ='<='
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_3() { return cLEQEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLEQLessThanSignEqualsSignKeyword_3_0() { return cLEQLessThanSignEqualsSignKeyword_3_0; }
		
		//EQ='=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_4() { return cEQEnumLiteralDeclaration_4; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_4_0() { return cEQEqualsSignEqualsSignKeyword_4_0; }
		
		//GEQ='>='
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_5() { return cGEQEnumLiteralDeclaration_5; }
		
		//'>='
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_5_0() { return cGEQGreaterThanSignEqualsSignKeyword_5_0; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_6() { return cGTEnumLiteralDeclaration_6; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_6_0() { return cGTGreaterThanSignKeyword_6_0; }
		
		//AND='&&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_7() { return cANDEnumLiteralDeclaration_7; }
		
		//'&&'
		public Keyword getANDAmpersandAmpersandKeyword_7_0() { return cANDAmpersandAmpersandKeyword_7_0; }
		
		//OR='||'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_8() { return cOREnumLiteralDeclaration_8; }
		
		//'||'
		public Keyword getORVerticalLineVerticalLineKeyword_8_0() { return cORVerticalLineVerticalLineKeyword_8_0; }
	}
	
	private final ProgramElements pProgram;
	private final ClassElements pClass;
	private final AttributeDeclElements pAttributeDecl;
	private final MethodDeclElements pMethodDecl;
	private final ParamDeclElements pParamDecl;
	private final StmtElements pStmt;
	private final DeclarationElements pDeclaration;
	private final BlockElements pBlock;
	private final IfElements pIf;
	private final WhileElements pWhile;
	private final ReturnElements pReturn;
	private final PrintElements pPrint;
	private final EStringElements pEString;
	private final MemberElements pMember;
	private final AssignmentElements pAssignment;
	private final ExprElements pExpr;
	private final ProjectElements pProject;
	private final BinaryElements pBinary;
	private final UnaryElements pUnary;
	private final AtomicElements pAtomic;
	private final IntConstElements pIntConst;
	private final BoolConstElements pBoolConst;
	private final StringConstElements pStringConst;
	private final NewClassElements pNewClass;
	private final VarRefElements pVarRef;
	private final ThisElements pThis;
	private final EIntElements pEInt;
	private final UnaryOpElements eUnaryOp;
	private final BinaryOpElements eBinaryOp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ImpGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pClass = new ClassElements();
		this.pAttributeDecl = new AttributeDeclElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pParamDecl = new ParamDeclElements();
		this.pStmt = new StmtElements();
		this.pDeclaration = new DeclarationElements();
		this.pBlock = new BlockElements();
		this.pIf = new IfElements();
		this.pWhile = new WhileElements();
		this.pReturn = new ReturnElements();
		this.pPrint = new PrintElements();
		this.pEString = new EStringElements();
		this.pMember = new MemberElements();
		this.pAssignment = new AssignmentElements();
		this.pExpr = new ExprElements();
		this.pProject = new ProjectElements();
		this.pBinary = new BinaryElements();
		this.pUnary = new UnaryElements();
		this.pAtomic = new AtomicElements();
		this.pIntConst = new IntConstElements();
		this.pBoolConst = new BoolConstElements();
		this.pStringConst = new StringConstElements();
		this.pNewClass = new NewClassElements();
		this.pVarRef = new VarRefElements();
		this.pThis = new ThisElements();
		this.pEInt = new EIntElements();
		this.eUnaryOp = new UnaryOpElements();
		this.eBinaryOp = new BinaryOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("imp.lang.xtext.Imp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	classes+=Class*
	//	methods+=MethodDecl*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Class:
	//	'class' name=ID '{'
	//	attributes+=AttributeDecl*
	//	methods+=MethodDecl*
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//AttributeDecl:
	//	name=ID;
	public AttributeDeclElements getAttributeDeclAccess() {
		return pAttributeDecl;
	}
	
	public ParserRule getAttributeDeclRule() {
		return getAttributeDeclAccess().getRule();
	}
	
	//MethodDecl:
	//	'def' name=ID '(' (params+=ParamDecl (',' params+=ParamDecl)*)? ')' stmt=Stmt;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//ParamDecl:
	//	name=ID;
	public ParamDeclElements getParamDeclAccess() {
		return pParamDecl;
	}
	
	public ParserRule getParamDeclRule() {
		return getParamDeclAccess().getRule();
	}
	
	//Stmt:
	//	Declaration | Block | If | While | Return | Print | Assignment | Expr ';';
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	////Skip returns Skip:
	////	{Skip}
	////	'Skip';
	//Declaration:
	//	'let' name=EString '=' exp=Expr;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Block:
	//	{Block}
	//	'{' (stmts+=Stmt stmts+=Stmt*)?
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//If:
	//	'if' '(' cond=Expr ')' lhs=Stmt (=> 'else' rhs=Stmt);
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//While:
	//	'while' '(' cond=Expr ')' body=Stmt;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Return:
	//	'return' expr=Expr;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Print:
	//	'print' '(' expr=Expr ')';
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Member:
	//	AttributeDecl | MethodDecl;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Assignment:
	//	{Assignment} lhs=Expr '=' rhs=Project;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Expr:
	//	Project;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//Project Expr:
	//	Binary ({Project.lhs=current} (=> '.' (rhs=[Member] (ismethodcall?='(' (params+=Expr (',' params+=Expr)*)?
	//	')')?)))*;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Binary Expr:
	//	Unary ({Binary.lhs=current} op=BinaryOp rhs=Unary)*;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//Unary Expr:
	//	'(' Expr ')' | {Unary} op=UnaryOp expr=Unary | Atomic;
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//Atomic Expr:
	//	IntConst | BoolConst | StringConst | NewClass | VarRef | This;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//IntConst:
	//	{IntConst} value=EInt;
	public IntConstElements getIntConstAccess() {
		return pIntConst;
	}
	
	public ParserRule getIntConstRule() {
		return getIntConstAccess().getRule();
	}
	
	//BoolConst:
	//	{BoolConst} (value?='true' | 'false');
	public BoolConstElements getBoolConstAccess() {
		return pBoolConst;
	}
	
	public ParserRule getBoolConstRule() {
		return getBoolConstAccess().getRule();
	}
	
	//StringConst:
	//	value=STRING;
	public StringConstElements getStringConstAccess() {
		return pStringConst;
	}
	
	public ParserRule getStringConstRule() {
		return getStringConstAccess().getRule();
	}
	
	//NewClass:
	//	'new' class=[Class] '(' ')';
	public NewClassElements getNewClassAccess() {
		return pNewClass;
	}
	
	public ParserRule getNewClassRule() {
		return getNewClassAccess().getRule();
	}
	
	////ArrayDecl returns ArrayDecl:
	////	{ArrayDecl} '[' (values+=Expr (',' values+=Expr)*)? ']';
	//VarRef Expr:
	//	{VarRef} ref=[Symbol];
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}
	
	//This:
	//	{This} 'this';
	public ThisElements getThisAccess() {
		return pThis;
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum UnaryOp:
	//	NEGATE='-' | NOT='!';
	public UnaryOpElements getUnaryOpAccess() {
		return eUnaryOp;
	}
	
	public EnumRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//enum BinaryOp:
	//	ADD='+' | MUL='*' | LT='<' | LEQ='<=' | EQ='==' | GEQ='>=' | GT='>' | AND='&&' | OR='||';
	public BinaryOpElements getBinaryOpAccess() {
		return eBinaryOp;
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
