// automatically generated by Xtext
grammar imp.lang.xtext.Imp with org.eclipse.xtext.common.Terminals

import "http://www.example.org/imp" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Stmt returns Stmt:
	Skip | Assign | Block | If | While
;

Expr returns Expr:
	IntConst | BoolConst | Var | Unary | Binary | ArrayDecl;
	
ArrayDecl returns ArrayDecl:
	{ArrayDecl} '['  (values+=Expr (',' values+=Expr)*)? ']'
;

Skip returns Skip:
	{Skip}
	'Skip'
	;

Assign returns Assign:
	name=EString ('[' index=Expr ']')? '=' exp=Expr;

Block returns Block:
	{Block}
	'{'
		(stmts+=Stmt ( ';' stmts+=Stmt)*)?
	'}';

If returns If:
	'if' '(' cond=Expr ')'  lhs=Stmt (=> 'else' rhs=Stmt);

While returns While:
	'while' '(' cond=Expr ')' body=Stmt;

EString returns ecore::EString:
	STRING | ID;

IntConst returns IntConst:
	{IntConst}
	value=EInt;
	
BoolConst returns BoolConst:
	{BoolConst} (value?='true'|'false')
;

Var returns Var:
	{Var}
	name=EString ('[' index=Expr ']')?;

Unary returns Unary:
	'Unary' '{' op=UnaryOp expr=Expr '}';

Binary returns Binary:
	'Binary' '{' op=BinaryOp 
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

EInt returns ecore::EInt:
	'-'? INT;

enum UnaryOp returns UnaryOp:
				NEGATE = 'NEGATE' | NOT = 'NOT';

enum BinaryOp returns BinaryOp:
				ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | LT = 'LT' | LEQ = 'LEQ' | EQ = 'EQ' | GEQ = 'GEQ' | GT = 'GT' | AND = 'AND' | OR = 'OR';
