// automatically generated by Xtext
grammar imp.lang.xtext.Imp with org.eclipse.xtext.common.Terminals

//import "http://www.example.org/imp"
import "platform:/resource/imp.model/model/imp.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program:
	classes+=Class*
	methods+=MethodDecl*;

Class returns Class:
	'class' name=ID '{'
	attributes+=AttributeDecl*
	methods+=MethodDecl*
	'}';

AttributeDecl:
	name=ID;

MethodDecl:
	'def' name=ID '(' (params+=ParamDecl (',' params+=ParamDecl)*)? ')' stmt=Stmt;

ParamDecl:
	name=ID;

Stmt returns Stmt:
	Declaration | Block | If | While | Return | Print | Assignment | Expr ';';

	//Skip returns Skip:
//	{Skip}
//	'Skip';
Declaration returns Declaration:
	'let' name=EString '=' exp=Expr;

Block returns Block:
	{Block}
	'{'
	(stmts+=Stmt (stmts+=Stmt)*)?
	'}';

If returns If:
	'if' '(' cond=Expr ')' lhs=Stmt (=> 'else' rhs=Stmt);

While returns While:
	'while' '(' cond=Expr ')' body=Stmt;

Return returns Return:
	'return' expr=Expr;

Print returns Print:
	'print' '(' expr=Expr ')';

EString returns ecore::EString:
	STRING | ID;

Member:
	AttributeDecl | MethodDecl;

Assignment returns Assignment:
	{Assignment} lhs=Expr '=' rhs=Project;

Expr returns Expr:
	Project;

Project returns Expr:
	Binary ({Project.lhs=current} (=>'.' (rhs=[Member|ID] (ismethodcall?='(' (params+=Expr (',' params+=Expr)*)?
	')')?)))*;

Binary returns Expr:
	Unary ({Binary.lhs=current} op=BinaryOp rhs=Unary)*;

Unary returns Expr:
	'(' Expr ')' | {Unary} op=UnaryOp expr=Unary | Atomic;

Atomic returns Expr:
	IntConst | BoolConst | StringConst | NewClass | VarRef |
	//	ArrayDecl |
	This;

IntConst returns IntConst:
	{IntConst} value=EInt;

BoolConst returns BoolConst:
	{BoolConst} (value?='true' | 'false');

StringConst returns StringConst:
	value=STRING;

NewClass returns NewClass:
	'new' class=[Class|ID] '(' ')';

	//ArrayDecl returns ArrayDecl:
//	{ArrayDecl} '[' (values+=Expr (',' values+=Expr)*)? ']';
VarRef returns Expr:
	{VarRef} ref=[Symbol|ID];

This returns This:
	{This} 'this';

EInt returns ecore::EInt:
	INT;

enum UnaryOp returns UnaryOp:
	NEGATE='-' | NOT='!';

enum BinaryOp returns BinaryOp:
	ADD='+' | MUL='*' | LT='<' | LEQ='<=' | EQ='==' | GEQ='>=' | GT='>' | AND='&&' | OR='||';
