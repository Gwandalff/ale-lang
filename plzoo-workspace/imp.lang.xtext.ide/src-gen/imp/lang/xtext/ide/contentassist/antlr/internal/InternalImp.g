/*
 * generated by Xtext 2.14.0
 */
grammar InternalImp;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package imp.lang.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package imp.lang.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import imp.lang.xtext.services.ImpGrammarAccess;

}
@parser::members {
	private ImpGrammarAccess grammarAccess;

	public void setGrammarAccess(ImpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStmt
entryRuleStmt
:
{ before(grammarAccess.getStmtRule()); }
	 ruleStmt
{ after(grammarAccess.getStmtRule()); } 
	 EOF 
;

// Rule Stmt
ruleStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStmtAccess().getAlternatives()); }
		(rule__Stmt__Alternatives)
		{ after(grammarAccess.getStmtAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpr
entryRuleExpr
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAccess().getAlternatives()); }
		(rule__Expr__Alternatives)
		{ after(grammarAccess.getExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayDecl
entryRuleArrayDecl
:
{ before(grammarAccess.getArrayDeclRule()); }
	 ruleArrayDecl
{ after(grammarAccess.getArrayDeclRule()); } 
	 EOF 
;

// Rule ArrayDecl
ruleArrayDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayDeclAccess().getGroup()); }
		(rule__ArrayDecl__Group__0)
		{ after(grammarAccess.getArrayDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSkip
entryRuleSkip
:
{ before(grammarAccess.getSkipRule()); }
	 ruleSkip
{ after(grammarAccess.getSkipRule()); } 
	 EOF 
;

// Rule Skip
ruleSkip 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSkipAccess().getGroup()); }
		(rule__Skip__Group__0)
		{ after(grammarAccess.getSkipAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssign
entryRuleAssign
:
{ before(grammarAccess.getAssignRule()); }
	 ruleAssign
{ after(grammarAccess.getAssignRule()); } 
	 EOF 
;

// Rule Assign
ruleAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignAccess().getGroup()); }
		(rule__Assign__Group__0)
		{ after(grammarAccess.getAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntConst
entryRuleIntConst
:
{ before(grammarAccess.getIntConstRule()); }
	 ruleIntConst
{ after(grammarAccess.getIntConstRule()); } 
	 EOF 
;

// Rule IntConst
ruleIntConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntConstAccess().getGroup()); }
		(rule__IntConst__Group__0)
		{ after(grammarAccess.getIntConstAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolConst
entryRuleBoolConst
:
{ before(grammarAccess.getBoolConstRule()); }
	 ruleBoolConst
{ after(grammarAccess.getBoolConstRule()); } 
	 EOF 
;

// Rule BoolConst
ruleBoolConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolConstAccess().getGroup()); }
		(rule__BoolConst__Group__0)
		{ after(grammarAccess.getBoolConstAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVar
entryRuleVar
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAccess().getGroup()); }
		(rule__Var__Group__0)
		{ after(grammarAccess.getVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnary
entryRuleUnary
:
{ before(grammarAccess.getUnaryRule()); }
	 ruleUnary
{ after(grammarAccess.getUnaryRule()); } 
	 EOF 
;

// Rule Unary
ruleUnary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryAccess().getGroup()); }
		(rule__Unary__Group__0)
		{ after(grammarAccess.getUnaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinary
entryRuleBinary
:
{ before(grammarAccess.getBinaryRule()); }
	 ruleBinary
{ after(grammarAccess.getBinaryRule()); } 
	 EOF 
;

// Rule Binary
ruleBinary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryAccess().getGroup()); }
		(rule__Binary__Group__0)
		{ after(grammarAccess.getBinaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule UnaryOp
ruleUnaryOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOpAccess().getAlternatives()); }
		(rule__UnaryOp__Alternatives)
		{ after(grammarAccess.getUnaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BinaryOp
ruleBinaryOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOpAccess().getAlternatives()); }
		(rule__BinaryOp__Alternatives)
		{ after(grammarAccess.getBinaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStmtAccess().getSkipParserRuleCall_0()); }
		ruleSkip
		{ after(grammarAccess.getStmtAccess().getSkipParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getAssignParserRuleCall_1()); }
		ruleAssign
		{ after(grammarAccess.getStmtAccess().getAssignParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getBlockParserRuleCall_2()); }
		ruleBlock
		{ after(grammarAccess.getStmtAccess().getBlockParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getIfParserRuleCall_3()); }
		ruleIf
		{ after(grammarAccess.getStmtAccess().getIfParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getWhileParserRuleCall_4()); }
		ruleWhile
		{ after(grammarAccess.getStmtAccess().getWhileParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprAccess().getIntConstParserRuleCall_0()); }
		ruleIntConst
		{ after(grammarAccess.getExprAccess().getIntConstParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprAccess().getBoolConstParserRuleCall_1()); }
		ruleBoolConst
		{ after(grammarAccess.getExprAccess().getBoolConstParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExprAccess().getVarParserRuleCall_2()); }
		ruleVar
		{ after(grammarAccess.getExprAccess().getVarParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExprAccess().getUnaryParserRuleCall_3()); }
		ruleUnary
		{ after(grammarAccess.getExprAccess().getUnaryParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExprAccess().getBinaryParserRuleCall_4()); }
		ruleBinary
		{ after(grammarAccess.getExprAccess().getBinaryParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExprAccess().getArrayDeclParserRuleCall_5()); }
		ruleArrayDecl
		{ after(grammarAccess.getExprAccess().getArrayDeclParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConst__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolConstAccess().getValueAssignment_1_0()); }
		(rule__BoolConst__ValueAssignment_1_0)
		{ after(grammarAccess.getBoolConstAccess().getValueAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getFalseKeyword_1_1()); }
		'false'
		{ after(grammarAccess.getBoolConstAccess().getFalseKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOpAccess().getNEGATEEnumLiteralDeclaration_0()); }
		('NEGATE')
		{ after(grammarAccess.getUnaryOpAccess().getNEGATEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration_1()); }
		('NOT')
		{ after(grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0()); }
		('ADD')
		{ after(grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getSUBEnumLiteralDeclaration_1()); }
		('SUB')
		{ after(grammarAccess.getBinaryOpAccess().getSUBEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_2()); }
		('MUL')
		{ after(grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getLTEnumLiteralDeclaration_3()); }
		('LT')
		{ after(grammarAccess.getBinaryOpAccess().getLTEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getLEQEnumLiteralDeclaration_4()); }
		('LEQ')
		{ after(grammarAccess.getBinaryOpAccess().getLEQEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getEQEnumLiteralDeclaration_5()); }
		('EQ')
		{ after(grammarAccess.getBinaryOpAccess().getEQEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getGEQEnumLiteralDeclaration_6()); }
		('GEQ')
		{ after(grammarAccess.getBinaryOpAccess().getGEQEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getGTEnumLiteralDeclaration_7()); }
		('GT')
		{ after(grammarAccess.getBinaryOpAccess().getGTEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getANDEnumLiteralDeclaration_8()); }
		('AND')
		{ after(grammarAccess.getBinaryOpAccess().getANDEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOpAccess().getOREnumLiteralDeclaration_9()); }
		('OR')
		{ after(grammarAccess.getBinaryOpAccess().getOREnumLiteralDeclaration_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group__0__Impl
	rule__ArrayDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getArrayDeclAction_0()); }
	()
	{ after(grammarAccess.getArrayDeclAccess().getArrayDeclAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group__1__Impl
	rule__ArrayDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getArrayDeclAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group__2__Impl
	rule__ArrayDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getGroup_2()); }
	(rule__ArrayDecl__Group_2__0)?
	{ after(grammarAccess.getArrayDeclAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getArrayDeclAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDecl__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group_2__0__Impl
	rule__ArrayDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getValuesAssignment_2_0()); }
	(rule__ArrayDecl__ValuesAssignment_2_0)
	{ after(grammarAccess.getArrayDeclAccess().getValuesAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getGroup_2_1()); }
	(rule__ArrayDecl__Group_2_1__0)*
	{ after(grammarAccess.getArrayDeclAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDecl__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group_2_1__0__Impl
	rule__ArrayDecl__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getArrayDeclAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDecl__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDeclAccess().getValuesAssignment_2_1_1()); }
	(rule__ArrayDecl__ValuesAssignment_2_1_1)
	{ after(grammarAccess.getArrayDeclAccess().getValuesAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Skip__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Skip__Group__0__Impl
	rule__Skip__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSkipAccess().getSkipAction_0()); }
	()
	{ after(grammarAccess.getSkipAccess().getSkipAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Skip__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSkipAccess().getSkipKeyword_1()); }
	'Skip'
	{ after(grammarAccess.getSkipAccess().getSkipKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__0__Impl
	rule__Assign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getNameAssignment_0()); }
	(rule__Assign__NameAssignment_0)
	{ after(grammarAccess.getAssignAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__1__Impl
	rule__Assign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getGroup_1()); }
	(rule__Assign__Group_1__0)?
	{ after(grammarAccess.getAssignAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__2__Impl
	rule__Assign__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getAssignAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getExpAssignment_3()); }
	(rule__Assign__ExpAssignment_3)
	{ after(grammarAccess.getAssignAccess().getExpAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1__0__Impl
	rule__Assign__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getAssignAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1__1__Impl
	rule__Assign__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getIndexAssignment_1_1()); }
	(rule__Assign__IndexAssignment_1_1)
	{ after(grammarAccess.getAssignAccess().getIndexAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getAssignAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getGroup_2()); }
	(rule__Block__Group_2__0)?
	{ after(grammarAccess.getBlockAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2__0__Impl
	rule__Block__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStmtsAssignment_2_0()); }
	(rule__Block__StmtsAssignment_2_0)
	{ after(grammarAccess.getBlockAccess().getStmtsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getGroup_2_1()); }
	(rule__Block__Group_2_1__0)*
	{ after(grammarAccess.getBlockAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2_1__0__Impl
	rule__Block__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getSemicolonKeyword_2_1_0()); }
	';'
	{ after(grammarAccess.getBlockAccess().getSemicolonKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStmtsAssignment_2_1_1()); }
	(rule__Block__StmtsAssignment_2_1_1)
	{ after(grammarAccess.getBlockAccess().getStmtsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCondAssignment_2()); }
	(rule__If__CondAssignment_2)
	{ after(grammarAccess.getIfAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIfAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLhsAssignment_4()); }
	(rule__If__LhsAssignment_4)
	{ after(grammarAccess.getIfAccess().getLhsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_5()); }
	(rule__If__Group_5__0)
	{ after(grammarAccess.getIfAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_5__0__Impl
	rule__If__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_5_0()); }
	('else')
	{ after(grammarAccess.getIfAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRhsAssignment_5_1()); }
	(rule__If__RhsAssignment_5_1)
	{ after(grammarAccess.getIfAccess().getRhsAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getCondAssignment_2()); }
	(rule__While__CondAssignment_2)
	{ after(grammarAccess.getWhileAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getBodyAssignment_4()); }
	(rule__While__BodyAssignment_4)
	{ after(grammarAccess.getWhileAccess().getBodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntConst__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntConst__Group__0__Impl
	rule__IntConst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntConstAccess().getIntConstAction_0()); }
	()
	{ after(grammarAccess.getIntConstAccess().getIntConstAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntConst__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntConstAccess().getValueAssignment_1()); }
	(rule__IntConst__ValueAssignment_1)
	{ after(grammarAccess.getIntConstAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolConst__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolConst__Group__0__Impl
	rule__BoolConst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConst__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolConstAccess().getBoolConstAction_0()); }
	()
	{ after(grammarAccess.getBoolConstAccess().getBoolConstAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConst__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolConst__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConst__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolConstAccess().getAlternatives_1()); }
	(rule__BoolConst__Alternatives_1)
	{ after(grammarAccess.getBoolConstAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__0__Impl
	rule__Var__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getVarAction_0()); }
	()
	{ after(grammarAccess.getVarAccess().getVarAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__1__Impl
	rule__Var__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getNameAssignment_1()); }
	(rule__Var__NameAssignment_1)
	{ after(grammarAccess.getVarAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getGroup_2()); }
	(rule__Var__Group_2__0)?
	{ after(grammarAccess.getVarAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group_2__0__Impl
	rule__Var__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getLeftSquareBracketKeyword_2_0()); }
	'['
	{ after(grammarAccess.getVarAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group_2__1__Impl
	rule__Var__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getIndexAssignment_2_1()); }
	(rule__Var__IndexAssignment_2_1)
	{ after(grammarAccess.getVarAccess().getIndexAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getRightSquareBracketKeyword_2_2()); }
	']'
	{ after(grammarAccess.getVarAccess().getRightSquareBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group__0__Impl
	rule__Unary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getUnaryKeyword_0()); }
	'Unary'
	{ after(grammarAccess.getUnaryAccess().getUnaryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group__1__Impl
	rule__Unary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getUnaryAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group__2__Impl
	rule__Unary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getOpAssignment_2()); }
	(rule__Unary__OpAssignment_2)
	{ after(grammarAccess.getUnaryAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group__3__Impl
	rule__Unary__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getExprAssignment_3()); }
	(rule__Unary__ExprAssignment_3)
	{ after(grammarAccess.getUnaryAccess().getExprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getUnaryAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__0__Impl
	rule__Binary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getBinaryKeyword_0()); }
	'Binary'
	{ after(grammarAccess.getBinaryAccess().getBinaryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__1__Impl
	rule__Binary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBinaryAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__2__Impl
	rule__Binary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getOpAssignment_2()); }
	(rule__Binary__OpAssignment_2)
	{ after(grammarAccess.getBinaryAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__3__Impl
	rule__Binary__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getLhsKeyword_3()); }
	'lhs'
	{ after(grammarAccess.getBinaryAccess().getLhsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__4__Impl
	rule__Binary__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getLhsAssignment_4()); }
	(rule__Binary__LhsAssignment_4)
	{ after(grammarAccess.getBinaryAccess().getLhsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__5__Impl
	rule__Binary__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getRhsKeyword_5()); }
	'rhs'
	{ after(grammarAccess.getBinaryAccess().getRhsKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__6__Impl
	rule__Binary__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getRhsAssignment_6()); }
	(rule__Binary__RhsAssignment_6)
	{ after(grammarAccess.getBinaryAccess().getRhsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getBinaryAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDecl__ValuesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayDeclAccess().getValuesExprParserRuleCall_2_0_0()); }
		ruleExpr
		{ after(grammarAccess.getArrayDeclAccess().getValuesExprParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__ValuesAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayDeclAccess().getValuesExprParserRuleCall_2_1_1_0()); }
		ruleExpr
		{ after(grammarAccess.getArrayDeclAccess().getValuesExprParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getAssignAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__IndexAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getIndexExprParserRuleCall_1_1_0()); }
		ruleExpr
		{ after(grammarAccess.getAssignAccess().getIndexExprParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__ExpAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getExpExprParserRuleCall_3_0()); }
		ruleExpr
		{ after(grammarAccess.getAssignAccess().getExpExprParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StmtsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_2_0_0()); }
		ruleStmt
		{ after(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StmtsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_2_1_1_0()); }
		ruleStmt
		{ after(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCondExprParserRuleCall_2_0()); }
		ruleExpr
		{ after(grammarAccess.getIfAccess().getCondExprParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__LhsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getLhsStmtParserRuleCall_4_0()); }
		ruleStmt
		{ after(grammarAccess.getIfAccess().getLhsStmtParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__RhsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getRhsStmtParserRuleCall_5_1_0()); }
		ruleStmt
		{ after(grammarAccess.getIfAccess().getRhsStmtParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getCondExprParserRuleCall_2_0()); }
		ruleExpr
		{ after(grammarAccess.getWhileAccess().getCondExprParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__BodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getBodyStmtParserRuleCall_4_0()); }
		ruleStmt
		{ after(grammarAccess.getWhileAccess().getBodyStmtParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntConstAccess().getValueEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getIntConstAccess().getValueEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConst__ValueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolConstAccess().getValueTrueKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getBoolConstAccess().getValueTrueKeyword_1_0_0()); }
			'true'
			{ after(grammarAccess.getBoolConstAccess().getValueTrueKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getBoolConstAccess().getValueTrueKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getVarAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__IndexAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getIndexExprParserRuleCall_2_1_0()); }
		ruleExpr
		{ after(grammarAccess.getVarAccess().getIndexExprParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAccess().getOpUnaryOpEnumRuleCall_2_0()); }
		ruleUnaryOp
		{ after(grammarAccess.getUnaryAccess().getOpUnaryOpEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__ExprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAccess().getExprExprParserRuleCall_3_0()); }
		ruleExpr
		{ after(grammarAccess.getUnaryAccess().getExprExprParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getOpBinaryOpEnumRuleCall_2_0()); }
		ruleBinaryOp
		{ after(grammarAccess.getBinaryAccess().getOpBinaryOpEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__LhsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getLhsExprParserRuleCall_4_0()); }
		ruleExpr
		{ after(grammarAccess.getBinaryAccess().getLhsExprParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__RhsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getRhsExprParserRuleCall_6_0()); }
		ruleExpr
		{ after(grammarAccess.getBinaryAccess().getRhsExprParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
