/*
 * generated by Xtext 2.14.0
 */
package imp.lang.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import imp.lang.xtext.ide.contentassist.antlr.internal.InternalImpParser;
import imp.lang.xtext.services.ImpGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ImpParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ImpGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ImpGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStmtAccess().getAlternatives(), "rule__Stmt__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
			builder.put(grammarAccess.getUnaryAccess().getAlternatives(), "rule__Unary__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getBoolConstAccess().getAlternatives_1(), "rule__BoolConst__Alternatives_1");
			builder.put(grammarAccess.getUnaryOpAccess().getAlternatives(), "rule__UnaryOp__Alternatives");
			builder.put(grammarAccess.getBinaryOpAccess().getAlternatives(), "rule__BinaryOp__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getMethodDeclAccess().getGroup(), "rule__MethodDecl__Group__0");
			builder.put(grammarAccess.getMethodDeclAccess().getGroup_3(), "rule__MethodDecl__Group_3__0");
			builder.put(grammarAccess.getMethodDeclAccess().getGroup_3_1(), "rule__MethodDecl__Group_3_1__0");
			builder.put(grammarAccess.getStmtAccess().getGroup_7(), "rule__Stmt__Group_7__0");
			builder.put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup_2(), "rule__Block__Group_2__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_5(), "rule__If__Group_5__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1(), "rule__Project__Group_1__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1_1(), "rule__Project__Group_1_1__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1_1_1(), "rule__Project__Group_1_1_1__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1_1_1_1(), "rule__Project__Group_1_1_1_1__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1_1_1_1_1(), "rule__Project__Group_1_1_1_1_1__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1_1_1_1_1_1(), "rule__Project__Group_1_1_1_1_1_1__0");
			builder.put(grammarAccess.getBinaryAccess().getGroup(), "rule__Binary__Group__0");
			builder.put(grammarAccess.getBinaryAccess().getGroup_1(), "rule__Binary__Group_1__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_0(), "rule__Unary__Group_0__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_1(), "rule__Unary__Group_1__0");
			builder.put(grammarAccess.getIntConstAccess().getGroup(), "rule__IntConst__Group__0");
			builder.put(grammarAccess.getBoolConstAccess().getGroup(), "rule__BoolConst__Group__0");
			builder.put(grammarAccess.getNewClassAccess().getGroup(), "rule__NewClass__Group__0");
			builder.put(grammarAccess.getVarRefAccess().getGroup(), "rule__VarRef__Group__0");
			builder.put(grammarAccess.getThisAccess().getGroup(), "rule__This__Group__0");
			builder.put(grammarAccess.getProgramAccess().getClassesAssignment_0(), "rule__Program__ClassesAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getMethodsAssignment_1(), "rule__Program__MethodsAssignment_1");
			builder.put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
			builder.put(grammarAccess.getClassAccess().getAttributesAssignment_3(), "rule__Class__AttributesAssignment_3");
			builder.put(grammarAccess.getClassAccess().getMethodsAssignment_4(), "rule__Class__MethodsAssignment_4");
			builder.put(grammarAccess.getAttributeDeclAccess().getNameAssignment(), "rule__AttributeDecl__NameAssignment");
			builder.put(grammarAccess.getMethodDeclAccess().getNameAssignment_1(), "rule__MethodDecl__NameAssignment_1");
			builder.put(grammarAccess.getMethodDeclAccess().getParamsAssignment_3_0(), "rule__MethodDecl__ParamsAssignment_3_0");
			builder.put(grammarAccess.getMethodDeclAccess().getParamsAssignment_3_1_1(), "rule__MethodDecl__ParamsAssignment_3_1_1");
			builder.put(grammarAccess.getMethodDeclAccess().getStmtAssignment_5(), "rule__MethodDecl__StmtAssignment_5");
			builder.put(grammarAccess.getParamDeclAccess().getNameAssignment(), "rule__ParamDecl__NameAssignment");
			builder.put(grammarAccess.getDeclarationAccess().getNameAssignment_1(), "rule__Declaration__NameAssignment_1");
			builder.put(grammarAccess.getDeclarationAccess().getExpAssignment_3(), "rule__Declaration__ExpAssignment_3");
			builder.put(grammarAccess.getBlockAccess().getStmtsAssignment_2_0(), "rule__Block__StmtsAssignment_2_0");
			builder.put(grammarAccess.getBlockAccess().getStmtsAssignment_2_1(), "rule__Block__StmtsAssignment_2_1");
			builder.put(grammarAccess.getIfAccess().getCondAssignment_2(), "rule__If__CondAssignment_2");
			builder.put(grammarAccess.getIfAccess().getLhsAssignment_4(), "rule__If__LhsAssignment_4");
			builder.put(grammarAccess.getIfAccess().getRhsAssignment_5_1(), "rule__If__RhsAssignment_5_1");
			builder.put(grammarAccess.getWhileAccess().getCondAssignment_2(), "rule__While__CondAssignment_2");
			builder.put(grammarAccess.getWhileAccess().getBodyAssignment_4(), "rule__While__BodyAssignment_4");
			builder.put(grammarAccess.getReturnAccess().getExprAssignment_1(), "rule__Return__ExprAssignment_1");
			builder.put(grammarAccess.getPrintAccess().getExprAssignment_2(), "rule__Print__ExprAssignment_2");
			builder.put(grammarAccess.getAssignmentAccess().getLhsAssignment_1(), "rule__Assignment__LhsAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getRhsAssignment_3(), "rule__Assignment__RhsAssignment_3");
			builder.put(grammarAccess.getProjectAccess().getRhsAssignment_1_1_1_0(), "rule__Project__RhsAssignment_1_1_1_0");
			builder.put(grammarAccess.getProjectAccess().getIsmethodcallAssignment_1_1_1_1_0(), "rule__Project__IsmethodcallAssignment_1_1_1_1_0");
			builder.put(grammarAccess.getProjectAccess().getParamsAssignment_1_1_1_1_1_0(), "rule__Project__ParamsAssignment_1_1_1_1_1_0");
			builder.put(grammarAccess.getProjectAccess().getParamsAssignment_1_1_1_1_1_1_1(), "rule__Project__ParamsAssignment_1_1_1_1_1_1_1");
			builder.put(grammarAccess.getBinaryAccess().getOpAssignment_1_1(), "rule__Binary__OpAssignment_1_1");
			builder.put(grammarAccess.getBinaryAccess().getRhsAssignment_1_2(), "rule__Binary__RhsAssignment_1_2");
			builder.put(grammarAccess.getUnaryAccess().getOpAssignment_1_1(), "rule__Unary__OpAssignment_1_1");
			builder.put(grammarAccess.getUnaryAccess().getExprAssignment_1_2(), "rule__Unary__ExprAssignment_1_2");
			builder.put(grammarAccess.getIntConstAccess().getValueAssignment_1(), "rule__IntConst__ValueAssignment_1");
			builder.put(grammarAccess.getBoolConstAccess().getValueAssignment_1_0(), "rule__BoolConst__ValueAssignment_1_0");
			builder.put(grammarAccess.getStringConstAccess().getValueAssignment(), "rule__StringConst__ValueAssignment");
			builder.put(grammarAccess.getNewClassAccess().getClassAssignment_1(), "rule__NewClass__ClassAssignment_1");
			builder.put(grammarAccess.getVarRefAccess().getRefAssignment_1(), "rule__VarRef__RefAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ImpGrammarAccess grammarAccess;

	@Override
	protected InternalImpParser createParser() {
		InternalImpParser result = new InternalImpParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ImpGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ImpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
