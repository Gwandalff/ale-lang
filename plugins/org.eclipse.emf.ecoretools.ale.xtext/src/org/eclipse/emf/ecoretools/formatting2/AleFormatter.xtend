/*******************************************************************************
 * Copyright (c) 2017 Inria and Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Inria - initial API and implementation
 *
 * generated by Xtext 2.14.0
 *******************************************************************************/
package org.eclipse.emf.ecoretools.formatting2

import com.google.inject.Inject
import org.eclipse.emf.ecoretools.ale.ExtendedClass
import org.eclipse.emf.ecoretools.ale.Unit
import org.eclipse.emf.ecoretools.services.AleGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class AleFormatter extends AbstractFormatter2 {
	
	@Inject extension AleGrammarAccess

	def dispatch void format(Unit unit, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (_import : unit.imports) {
			_import.format
		}
		for (service : unit.services) {
			service.format
		}
		for (behavioredClass : unit.xtendedClasses) {
			behavioredClass.format
		}
	}

	def dispatch void format(ExtendedClass extendedClass, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (attribute : extendedClass.attributes) {
			attribute.format
		}
		for (operation : extendedClass.operations) {
			operation.format
		}
	}
	
	// TODO: implement for RuntimeClass, Operation, Variable, Attribute, VarDecl, Assign, Insert, Remove, ForEach, Collection, Block, If, While, rSwitch, rCase, ExpressionStmt, Call, Apply, Mult, Add, Comp, And, Or, Xor, Implie, Not, Min, Lit, Conditional, Let, binding, Sequence, OrderedSet, SeqType, SetType, ClassifierSetType, Feature
}
