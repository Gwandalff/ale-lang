/*
 * generated by Xtext 2.14.0
 */
grammar InternalImp;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package imp.lang.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package imp.lang.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import imp.lang.xtext.services.ImpGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private ImpGrammarAccess grammarAccess;

    public InternalImpParser(TokenStream input, ImpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ImpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getClassesClassParserRuleCall_0_0());
				}
				lv_classes_0_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"classes",
						lv_classes_0_0,
						"imp.lang.xtext.Imp.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getMethodsMethodDeclParserRuleCall_1_0());
				}
				lv_methods_1_0=ruleMethodDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"methods",
						lv_methods_1_0,
						"imp.lang.xtext.Imp.MethodDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getAttributesAttributeDeclParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttributeDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"imp.lang.xtext.Imp.AttributeDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getMethodsMethodDeclParserRuleCall_4_0());
				}
				lv_methods_4_0=ruleMethodDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"methods",
						lv_methods_4_0,
						"imp.lang.xtext.Imp.MethodDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleAttributeDecl
entryRuleAttributeDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeDeclRule()); }
	iv_ruleAttributeDecl=ruleAttributeDecl
	{ $current=$iv_ruleAttributeDecl.current; }
	EOF;

// Rule AttributeDecl
ruleAttributeDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAttributeDeclAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAttributeDeclRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleMethodDecl
entryRuleMethodDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclRule()); }
	iv_ruleMethodDecl=ruleMethodDecl
	{ $current=$iv_ruleMethodDecl.current; }
	EOF;

// Rule MethodDecl
ruleMethodDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='def'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodDeclAccess().getDefKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMethodDeclAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodDeclAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodDeclAccess().getParamsParamDeclParserRuleCall_3_0_0());
					}
					lv_params_3_0=ruleParamDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"imp.lang.xtext.Imp.ParamDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getMethodDeclAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodDeclAccess().getParamsParamDeclParserRuleCall_3_1_1_0());
						}
						lv_params_5_0=ruleParamDecl
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"imp.lang.xtext.Imp.ParamDecl");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMethodDeclAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getStmtStmtParserRuleCall_5_0());
				}
				lv_stmt_7_0=ruleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_7_0,
						"imp.lang.xtext.Imp.Stmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParamDecl
entryRuleParamDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamDeclRule()); }
	iv_ruleParamDecl=ruleParamDecl
	{ $current=$iv_ruleParamDecl.current; }
	EOF;

// Rule ParamDecl
ruleParamDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getParamDeclAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParamDeclRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	iv_ruleStmt=ruleStmt
	{ $current=$iv_ruleStmt.current; }
	EOF;

// Rule Stmt
ruleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStmtAccess().getDeclarationParserRuleCall_0());
		}
		this_Declaration_0=ruleDeclaration
		{
			$current = $this_Declaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStmtAccess().getBlockParserRuleCall_1());
		}
		this_Block_1=ruleBlock
		{
			$current = $this_Block_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStmtAccess().getIfParserRuleCall_2());
		}
		this_If_2=ruleIf
		{
			$current = $this_If_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStmtAccess().getWhileParserRuleCall_3());
		}
		this_While_3=ruleWhile
		{
			$current = $this_While_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStmtAccess().getReturnParserRuleCall_4());
		}
		this_Return_4=ruleReturn
		{
			$current = $this_Return_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStmtAccess().getPrintParserRuleCall_5());
		}
		this_Print_5=rulePrint
		{
			$current = $this_Print_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStmtAccess().getAssignmentParserRuleCall_6());
		}
		this_Assignment_6=ruleAssignment
		{
			$current = $this_Assignment_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStmtAccess().getExprParserRuleCall_7_0());
			}
			this_Expr_7=ruleExpr
			{
				$current = $this_Expr_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getStmtAccess().getSemicolonKeyword_7_1());
			}
		)
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeclarationAccess().getLetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"imp.lang.xtext.Imp.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getExpExprParserRuleCall_3_0());
				}
				lv_exp_3_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"imp.lang.xtext.Imp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_2_0_0());
					}
					lv_stmts_2_0=ruleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"stmts",
							lv_stmts_2_0,
							"imp.lang.xtext.Imp.Stmt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_2_1_0());
					}
					lv_stmts_3_0=ruleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"stmts",
							lv_stmts_3_0,
							"imp.lang.xtext.Imp.Stmt");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getCondExprParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"imp.lang.xtext.Imp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getLhsStmtParserRuleCall_4_0());
				}
				lv_lhs_4_0=ruleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_4_0,
						"imp.lang.xtext.Imp.Stmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getRhsStmtParserRuleCall_5_1_0());
					}
					lv_rhs_6_0=ruleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_6_0,
							"imp.lang.xtext.Imp.Stmt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getCondExprParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"imp.lang.xtext.Imp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getBodyStmtParserRuleCall_4_0());
				}
				lv_body_4_0=ruleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"imp.lang.xtext.Imp.Stmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current; }
	EOF;

// Rule Return
ruleReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"imp.lang.xtext.Imp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getExprExprParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"imp.lang.xtext.Imp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPrintAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAssignmentAccess().getAssignmentAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getLhsExprParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_1_0,
						"imp.lang.xtext.Imp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getRhsProjectParserRuleCall_3_0());
				}
				lv_rhs_3_0=ruleProject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_3_0,
						"imp.lang.xtext.Imp.Project");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getExprAccess().getProjectParserRuleCall());
	}
	this_Project_0=ruleProject
	{
		$current = $this_Project_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProjectAccess().getBinaryParserRuleCall_0());
		}
		this_Binary_0=ruleBinary
		{
			$current = $this_Binary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getProjectAccess().getProjectLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					('.')=>
					otherlv_2='.'
					{
						newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getFullStopKeyword_1_1_0());
					}
				)
				(
					(
						(
							{
								/* */
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getProjectRule());
								}
							}
							otherlv_3=RULE_ID
							{
								newLeafNode(otherlv_3, grammarAccess.getProjectAccess().getRhsMemberCrossReference_1_1_1_0_0());
							}
						)
					)
					(
						(
							(
								lv_ismethodcall_4_0='('
								{
									newLeafNode(lv_ismethodcall_4_0, grammarAccess.getProjectAccess().getIsmethodcallLeftParenthesisKeyword_1_1_1_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getProjectRule());
									}
									setWithLastConsumed($current, "ismethodcall", true, "(");
								}
							)
						)
						(
							(
								(
									{
										newCompositeNode(grammarAccess.getProjectAccess().getParamsExprParserRuleCall_1_1_1_1_1_0_0());
									}
									lv_params_5_0=ruleExpr
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getProjectRule());
										}
										add(
											$current,
											"params",
											lv_params_5_0,
											"imp.lang.xtext.Imp.Expr");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								otherlv_6=','
								{
									newLeafNode(otherlv_6, grammarAccess.getProjectAccess().getCommaKeyword_1_1_1_1_1_1_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getProjectAccess().getParamsExprParserRuleCall_1_1_1_1_1_1_1_0());
										}
										lv_params_7_0=ruleExpr
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getProjectRule());
											}
											add(
												$current,
												"params",
												lv_params_7_0,
												"imp.lang.xtext.Imp.Expr");
											afterParserOrEnumRuleCall();
										}
									)
								)
							)*
						)?
						otherlv_8=')'
						{
							newLeafNode(otherlv_8, grammarAccess.getProjectAccess().getRightParenthesisKeyword_1_1_1_1_2());
						}
					)?
				)
			)
		)*
	)
;

// Entry rule entryRuleBinary
entryRuleBinary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryRule()); }
	iv_ruleBinary=ruleBinary
	{ $current=$iv_ruleBinary.current; }
	EOF;

// Rule Binary
ruleBinary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryAccess().getUnaryParserRuleCall_0());
		}
		this_Unary_0=ruleUnary
		{
			$current = $this_Unary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBinaryAccess().getBinaryLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBinaryAccess().getOpBinaryOpEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleBinaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBinaryRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"imp.lang.xtext.Imp.BinaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBinaryAccess().getRhsUnaryParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBinaryRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"imp.lang.xtext.Imp.Unary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	iv_ruleUnary=ruleUnary
	{ $current=$iv_ruleUnary.current; }
	EOF;

// Rule Unary
ruleUnary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getUnaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getUnaryAccess().getExprParserRuleCall_0_1());
			}
			this_Expr_1=ruleExpr
			{
				$current = $this_Expr_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getUnaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryAccess().getUnaryAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryAccess().getOpUnaryOpEnumRuleCall_1_1_0());
					}
					lv_op_4_0=ruleUnaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryRule());
						}
						set(
							$current,
							"op",
							lv_op_4_0,
							"imp.lang.xtext.Imp.UnaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryAccess().getExprUnaryParserRuleCall_1_2_0());
					}
					lv_expr_5_0=ruleUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryRule());
						}
						set(
							$current,
							"expr",
							lv_expr_5_0,
							"imp.lang.xtext.Imp.Unary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getUnaryAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_6=ruleAtomic
		{
			$current = $this_Atomic_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getIntConstParserRuleCall_0());
		}
		this_IntConst_0=ruleIntConst
		{
			$current = $this_IntConst_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getBoolConstParserRuleCall_1());
		}
		this_BoolConst_1=ruleBoolConst
		{
			$current = $this_BoolConst_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getStringConstParserRuleCall_2());
		}
		this_StringConst_2=ruleStringConst
		{
			$current = $this_StringConst_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getNewClassParserRuleCall_3());
		}
		this_NewClass_3=ruleNewClass
		{
			$current = $this_NewClass_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getVarRefParserRuleCall_4());
		}
		this_VarRef_4=ruleVarRef
		{
			$current = $this_VarRef_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getThisParserRuleCall_5());
		}
		this_This_5=ruleThis
		{
			$current = $this_This_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntConst
entryRuleIntConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntConstRule()); }
	iv_ruleIntConst=ruleIntConst
	{ $current=$iv_ruleIntConst.current; }
	EOF;

// Rule IntConst
ruleIntConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntConstAccess().getIntConstAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIntConstAccess().getValueEIntParserRuleCall_1_0());
				}
				lv_value_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntConstRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"imp.lang.xtext.Imp.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolConst
entryRuleBoolConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolConstRule()); }
	iv_ruleBoolConst=ruleBoolConst
	{ $current=$iv_ruleBoolConst.current; }
	EOF;

// Rule BoolConst
ruleBoolConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolConstAccess().getBoolConstAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_0='true'
					{
						newLeafNode(lv_value_1_0, grammarAccess.getBoolConstAccess().getValueTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBoolConstRule());
						}
						setWithLastConsumed($current, "value", true, "true");
					}
				)
			)
			    |
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolConstAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleStringConst
entryRuleStringConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringConstRule()); }
	iv_ruleStringConst=ruleStringConst
	{ $current=$iv_ruleStringConst.current; }
	EOF;

// Rule StringConst
ruleStringConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringConstAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringConstRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleNewClass
entryRuleNewClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewClassRule()); }
	iv_ruleNewClass=ruleNewClass
	{ $current=$iv_ruleNewClass.current; }
	EOF;

// Rule NewClass
ruleNewClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='new'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewClassAccess().getNewKeyword_0());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNewClassRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getNewClassAccess().getClassClassCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getNewClassAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNewClassAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleVarRef
entryRuleVarRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRefRule()); }
	iv_ruleVarRef=ruleVarRef
	{ $current=$iv_ruleVarRef.current; }
	EOF;

// Rule VarRef
ruleVarRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarRefAccess().getVarRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarRefRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVarRefAccess().getRefSymbolCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThisRule()); }
	iv_ruleThis=ruleThis
	{ $current=$iv_ruleThis.current; }
	EOF;

// Rule This
ruleThis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getThisAccess().getThisAction_0(),
					$current);
			}
		)
		otherlv_1='this'
		{
			newLeafNode(otherlv_1, grammarAccess.getThisAccess().getThisKeyword_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEIntAccess().getINTTerminalRuleCall());
	}
;

// Rule UnaryOp
ruleUnaryOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='-'
			{
				$current = grammarAccess.getUnaryOpAccess().getNEGATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOpAccess().getNEGATEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!'
			{
				$current = grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BinaryOp
ruleBinaryOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='*'
			{
				$current = grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getBinaryOpAccess().getLTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinaryOpAccess().getLTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getBinaryOpAccess().getLEQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBinaryOpAccess().getLEQEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='=='
			{
				$current = grammarAccess.getBinaryOpAccess().getEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBinaryOpAccess().getEQEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='>='
			{
				$current = grammarAccess.getBinaryOpAccess().getGEQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBinaryOpAccess().getGEQEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='>'
			{
				$current = grammarAccess.getBinaryOpAccess().getGTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getBinaryOpAccess().getGTEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='&&'
			{
				$current = grammarAccess.getBinaryOpAccess().getANDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getBinaryOpAccess().getANDEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='||'
			{
				$current = grammarAccess.getBinaryOpAccess().getOREnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getBinaryOpAccess().getOREnumLiteralDeclaration_8());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
